package routes

import (
	"go-api/internal/handlers"
	"go-api/internal/middleware"

	_ "go-api/docs" // important: for loading docs generated by swag

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// SetupRoutes initializes API routes
func SetupRoutes() *gin.Engine {
	r := gin.Default()

	// Set up CORS
	r.Use(middleware.CORSMiddleware())

	// Set up swagger
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Apply logger middleware
	r.Use(middleware.LoggerMiddleware())

	// Public route (Login, Register)
	r.POST("/api/v1/login", handlers.LoginHandler)
	r.POST("/api/v1/register", handlers.RegisterHandler)

	// Protected routes
	protected := r.Group("/api/v1")
	protected.Use(middleware.AuthMiddleware())

	// Admin routes (only admin can modify data)
	admin := protected.Group("/")
	admin.Use(middleware.RoleMiddleware("admin"))

	// Manager routes (only manager or above can modify data)
	manager := protected.Group("/")
	manager.Use(middleware.RoleMiddleware("manager"))

	// User routes
	admin.GET("/users", handlers.GetUsers)
	admin.GET("/user", handlers.GetUserByID)
	admin.POST("/user/create", handlers.CreateUser)
	admin.PUT("/user/update", handlers.UpdateUser)
	admin.DELETE("/user/delete", handlers.DeleteUser)
	
	// Pokemon routes
	protected.GET("/pokemons", handlers.GetPokemons)
	protected.GET("/pokemon", handlers.GetPokemonByID)
	protected.POST("/pokemon/create", handlers.CreatePokemon)
	protected.PUT("/pokemon/update", handlers.UpdatePokemon)
	protected.DELETE("/pokemon/delete", handlers.DeletePokemon)

	return r
}
