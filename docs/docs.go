// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Komang Damai",
            "email": "komangdamai3@gmail.com"
        },
        "license": {
            "name": "MIT License",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "Authenticates user and returns JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Token"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    }
                }
            }
        },
        "/pokemon": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of pokemons by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pokemons"
                ],
                "summary": "Get pokemon by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Pokemon not found",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    }
                }
            }
        },
        "/pokemon/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creating new pokemon with role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pokemons"
                ],
                "summary": "Create new pokemon",
                "parameters": [
                    {
                        "description": "Create pokemon credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateFavoritePokemonRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Token"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "409": {
                        "description": "Pokemon email already used",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to hash password",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    }
                }
            }
        },
        "/pokemon/delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete pokemon by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pokemons"
                ],
                "summary": "Delete pokemon",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Token"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Pokemons not found",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    }
                }
            }
        },
        "/pokemon/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update pokemon by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pokemons"
                ],
                "summary": "Update pokemon",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "description": "Update pokemon credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateFavoritePokemonRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Token"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Pokemons not found",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    }
                }
            }
        },
        "/pokemons": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of pokemons with filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pokemons"
                ],
                "summary": "Get all pokemons",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by user_email",
                        "name": "user_email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by notes",
                        "name": "notes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by field (name, type, notes)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order (asc or desc), default is asc",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Pokemons not found",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register new user for member",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "Create user credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Token"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "409": {
                        "description": "User email already used",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to hash password",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of users by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    }
                }
            }
        },
        "/user/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creating new user with role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create new user",
                "parameters": [
                    {
                        "description": "Create user credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Token"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "409": {
                        "description": "User email already used",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to hash password",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    }
                }
            }
        },
        "/user/delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete user by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Token"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Users not found",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    }
                }
            }
        },
        "/user/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "description": "Update user credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Token"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Users not found",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of users with filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name filter",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Email filter",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Role filter",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Users not found",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CreateFavoritePokemonRequest": {
            "type": "object",
            "required": [
                "notes",
                "userEmail"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "notes": {
                    "type": "string",
                    "maxLength": 30
                },
                "sprite": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "userEmail": {
                    "type": "string"
                }
            }
        },
        "dto.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "role"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "minLength": 3
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "user",
                        "manager"
                    ]
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "minLength": 3
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "dto.TimeJSON": {
            "type": "object",
            "properties": {
                "time.Time": {
                    "type": "string"
                }
            }
        },
        "dto.Token": {
            "type": "object",
            "properties": {
                "activeUntil": {
                    "$ref": "#/definitions/dto.TimeJSON"
                },
                "email": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateFavoritePokemonRequest": {
            "type": "object",
            "required": [
                "notes"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "notes": {
                    "type": "string",
                    "maxLength": 30
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "minLength": 3
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "user",
                        "manager"
                    ]
                }
            }
        },
        "utils.BaseResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and your token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "gopoke-production.up.railway.app",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "PokeAPI",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
